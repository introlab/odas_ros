version = "2.1";

# Raw

raw:
{

    fS = 48000;
    hopSize = 512;
    nBits = 32;
    nChannels = 8;

    # Input with raw signal from microphones
    interface: {    #"arecord -l" OR "aplay --list-devices" to see the devices
        type = "pulseaudio";
        source = "alsa_input.usb-IntRoLab_8SoundsUSB_Audio_2.0-00.multichannel-input";
        channelmap = ("front-left", "front-right", "rear-left", "rear-right", "front-center", "lfe", "side-left", "side-right");
    }

}

# Mapping

mapping:
{
    map: (1,2,3,4,5,6,7,8);
}

# General

general:
{

    epsilon = 1E-20;

    size:   #for fft calculation
    {
        hopSize = 128;      #shift size of the cross fft
        frameSize = 256;    #size of each fft of the cross fft
    };

    samplerate:
    {
        mu = 48000;
        sigma2 = 0.01;
    };

    speedofsound:
    {
        mu = 343.0;
        sigma2 = 25.0;
    };

    mics = (

        # Microphone 1
        {
            # Front-left (camera side)
            mu = ( 0.047, -0.08921, 0.00249 );
            sigma2 = ( +1E-6, 0.0, 0.0, 0.0, +1E-6, 0.0, 0.0, 0.0, +1E-6 );
            direction = ( 1, 0, 0 );
            angle = ( 80.0, 90.0 );
        },

        # Microphone 2
        {
            # Front-center
            mu = ( 0.047, -0.00254, 0.00249 );
            sigma2 = ( +1E-6, 0.0, 0.0, 0.0, +1E-6, 0.0, 0.0, 0.0, +1E-6 );
            direction = ( 1, 0, 0 );
            angle = ( 80.0, 90.0 );
        },

        # Microphone 3
        {
            # Front-right
            mu = ( 0.047, 0.08921, 0.00249 );
            sigma2 = ( +1E-6, 0.0, 0.0, 0.0, +1E-6, 0.0, 0.0, 0.0, +1E-6 );
            direction = ( 1, 0, 0 );
            angle = ( 80.0, 90.0 );
        },

        # Microphone 4
        {
            # Right side (no camera)
            mu = ( 0, 0.08225, 0.00344 );
            sigma2 = ( +1E-6, 0.0, 0.0, 0.0, +1E-6, 0.0, 0.0, 0.0, +1E-6 );
            direction = ( 0, 1, 0 );
            angle = ( 60.0, 70.0 );
        },

        # Microphone 5
        {
            # Rear-left
            mu = ( -0.047, 0.07201, -0.00249 );
            sigma2 = ( +1E-6, 0.0, 0.0, 0.0, +1E-6, 0.0, 0.0, 0.0, +1E-6 );
            direction = ( -1, 0, 0 );
            angle = ( 80.0, 90.0 );
        },

        # Microphone 6
        {
            # Rear-center
            mu = ( -0.047, 0.00254, -0.00249 );
            sigma2 = ( +1E-6, 0.0, 0.0, 0.0, +1E-6, 0.0, 0.0, 0.0, +1E-6 );
            direction = ( -1, 0, 0 );
            angle = ( 80.0, 90.0 );
        },

        # Microphone 7
        {
            # Rear-right (camera side)
            mu = ( -0.047, -0.072, -0.00249 );
            sigma2 = ( +1E-6, 0.0, 0.0, 0.0, +1E-6, 0.0, 0.0, 0.0, +1E-6 );
            direction = ( -1, 0, 0 );
            angle = ( 80.0, 90.0 );
        },

        # Microphone 8
        {
            # Left side (camera side)
            mu = ( 0, -0.08225, 0.00335 );
            sigma2 = ( +1E-6, 0.0, 0.0, 0.0, +1E-6, 0.0, 0.0, 0.0, +1E-6 );
            direction = ( 0, -1, 0 );
            angle = ( 60.0, 70.0 );
        }

    );

    # Spatial filters to include only a range of direction if required
    # (may be useful to remove false detections from the floor, or
    # limit the space search to a restricted region)
    spatialfilters = (
        {
            direction = ( +0.000, +0.000, +1.000 );
            angle = (80.0, 90.0);
        },
        {
            direction = ( +0.000, +0.000, -1.000 );
            angle = (140.0, 150.0);
        }
    );


    nThetas = 181;
    gainMin = 0.25;

};

# Stationnary noise estimation

sne:
{

    b = 3;
    alphaS = 0.1;
    L = 150;
    delta = 3.0;
    alphaD = 0.1;

}

# Sound Source Localization

ssl:
{

    nPots = 2;
    nMatches = 10;
    probMin = 0.5;
    nRefinedLevels = 1;
    interpRate = 4;

    # Number of scans: level is the resolution of the sphere
    # and delta is the size of the maximum sliding window
    # (delta = -1 means the size is automatically computed)
    scans = (
        { level = 2; delta = -1; },
        { level = 4; delta = -1; }
    );

    # Output to export potential sources
    potential: {

        format = "json";
        #format = "undefined";

        interface: {
            type = "socket";
            #type = "blackhole";
            ip = "127.0.0.1";
            port = 9002;
        };

    };

};

# Sound Source Tracking

sst:
{

    # Mode is either "kalman" or "particle"

    mode = "kalman";

    # Add is either "static" or "dynamic"

    add = "dynamic";

    # Parameters used by both the Kalman and particle filter

    active = (
        { weight = 1.0; mu = 1; sigma2 = 0.0025 }
    );

    inactive = (
        { weight = 1.0; mu = 0.5; sigma2 = 0.0025 }
    );

    sigmaR2_prob = 0.0025;
    sigmaR2_active = 0.0225;
    sigmaR2_target = 0.0025;
    Pfalse = 0.1;
    Pnew = 0.1;
    Ptrack = 0.8;

    theta_new = 0.9;
    N_prob = 5;
    theta_prob = 0.8;
    N_inactive = ( 150 );
    theta_inactive = 0.9;

    # Parameters used by the Kalman filter only

    kalman: {

        sigmaQ = 0.001; #bigger=more reactive / smaller=more robust the noise

    };

    # Parameters used by the particle filter only

    particle: {

        nParticles = 1000;
        st_alpha = 2.0;
        st_beta = 0.04;
        st_ratio = 0.5;
        ve_alpha = 0.05;
        ve_beta = 0.2;
        ve_ratio = 0.3;
        ac_alpha = 0.5;
        ac_beta = 0.2;
        ac_ratio = 0.2;
        Nmin = 0.7;

    };

    target: ();

    # Output to export tracked sources
    tracked: {

        format = "json";

        interface: {
            type = "socket";
            ip = "127.0.0.1";
            port = 9000;
        };

    };

}

# Sound Source Separation

sss:
{

    # Mode is either "dds", "dgss" or "dmvdr"

    mode_sep = "dds"; #delay and sum
    mode_pf = "ms";

    gain_sep = 2.0;
    gain_pf = 10.0;

    dds: {

    };

    dgss: {

        mu = 0.01;
        lambda = 0.5;

    };

    dmvdr: {

    };

    ms: {

        alphaPmin = 0.07;
        eta = 0.5;
        alphaZ = 0.8;
        thetaWin = 0.3;
        alphaWin = 0.3;
        maxAbsenceProb = 0.9;
        Gmin = 0.01;
        winSizeLocal = 3;
        winSizeGlobal = 23;
        winSizeFrame = 256;

    };

    ss: {

        Gmin = 0.01;
        Gmid = 0.5;
        Gslope = 10.0;

    };

    separated: { #packaging and destination of the separated files

        fS = 48000;
        hopSize = 256;
        nBits = 16;

        interface: {
            type = "socket";
            ip = "127.0.0.1";
            port = 9001;
        }


    };

    postfiltered: { #packaging and destination of the post filtered files

        fS = 48000;
        hopSize = 256;
        nBits = 16;

        interface: {
            type = "blackhole";
            ip = "127.0.0.1";
            port = 9002;
        }



    };

}

classify:
{

    frameSize = 1024;
    winSize = 3;
    tauMin = 32;
    tauMax = 200;
    deltaTauMax = 7;
    alpha = 0.3;
    gamma = 0.01;
    phiMin = 0.5;
    r0 = 0.2;

    category: {
        format = "undefined";

        interface: {
            type = "blackhole";
        }
    }
}
